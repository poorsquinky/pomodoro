#!/bin/bash

# pomodoro - Start and run a pomodoro timer for use in tmux status line and elsewhere

# Copyright (C) 2015 Erik Stambaugh

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program (see the file LICENSE); if not, see
# http://www.gnu.org/licenses/, or write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301  USA

# Set some defaults
POMODORO_STATUS_FILE=/tmp/pom_$USER
POMODORO_BANG="‚ùó"
POMODORO_SYMBOL="üçÖ"
POMODORO_NBSP="¬†"
POMODORO_MINUTES=25

POMODORO_GRAPH_BLOCKS=( ‚ñÅ ‚ñÇ ‚ñÉ ‚ñÑ ‚ñÖ ‚ñÜ ‚ñá )
POMODORO_GRAPHICAL=0
POMODORO_DATA_ONLY=0

POMODORO_SSH=""

POMODORO_REMOTE_CMD=(ssh -q -o "ConnectTimeout 2" $POMODORO_SSH pomodoro)

test -e "$HOME/.pomodororc" && . "$HOME/.pomodororc"

function show_help () {
echo "Usage: $0 [options] start|status|clear

Options:
    -h | --help         Display this message
    -g | --graph        Use unicode graph instead of numerical
    -m | --minutes NUM  Enter number of minutes to use (default 25)
    -D                  Output data only
"
}

function number_as_blocks () {
    NUM=$1
    IDX=$(( $(( NUM * ${#POMODORO_GRAPH_BLOCKS[@]} )) / POMODORO_MINUTES ))
    if [ $IDX -lt 0 ]; then
        IDX=0
    elif [ $IDX -ge ${#POMODORO_GRAPH_BLOCKS[@]} ]; then
        IDX=$(( ${#POMODORO_GRAPH_BLOCKS[@]} - 1 ))
    fi

    echo -n ${POMODORO_GRAPH_BLOCKS[$IDX]}
}

NONOPT_ARGS=()
# I'm not in love with getopt or getopts right now, so we have this:
while [ $# -gt 0 ]; do
    ARG=$1
    shift
    case "$ARG" in
        -h|--help)
            show_help
            exit 0
            ;;
        -g|--graph)
            POMODORO_GRAPHICAL=1
            ;;
        -m|--minutes)
            # XXX: validate the number
            POMODORO_MIUTES=$1
            shift
            ;;
        -D)
            POMODORO_DATA_ONLY=1
            ;;
        *)
            NONOPT_ARGS+=("$ARG")
            ;;
    esac

done

P_COUNT=""
P_START=""
P_DURATION=""

### regex trigger warning ###
function parse_status () {
    IN="$@"
    if [ ! -z "$IN" ]; then
        if echo "$IN" | grep -E -q '^[0-9]+$'; then # numeric only
            P_START=$IN
        elif echo "$IN" | grep -E -q '^\s*\{\s*([a-zA-Z]+=\s*[0-9]*;?)+\s*\}\s*$'; then # formatted data
            while read LINE; do
                K=$(echo "$LINE" | cut -d= -f1 | tr A-Z a-z)
                V=$(echo "$LINE" | cut -d= -f2)
                test -z "$V" && exit 0
                case "$K" in
                    count)
                        P_COUNT=$V
                        ;;
                    start)
                        P_START=$V
                        ;;
                    duration)
                        P_DURATION=$V
                        ;;
                    remaining)
                        P_REMAINING=$V
                        ;;
                    # XXX no handler for bad values yet
                esac

            done < <(echo "$IN" | sed -E -e 's/ //g' -e 's/^ *\{ *//' -e 's/ *\} *$//' -e 's/;/\n/g')

        else
            echo "$IN" # upstream is old so just emit whatever it says
            exit 0
        fi
        test -z "$P_DURATION" && P_DURATION=$POMODORO_MINUTES
        P_REMAINING=$(( $P_DURATION - $(( $(( $(date +%s) - $P_START )) / 60 )) ))
    fi
}

function read_status () {

    P_COUNT=0 # XXX this doesn't do anything yet

    P_STATUS=""

    # try the URL
    if [ ! -z "$POMODORO_STATUS_URL" ]; then
        UNPARSED=$(curl -s "$POMODORO_STATUS_URL" 2>/dev/null)
        if echo "$UNPARSED" | grep -E -q '^\s*\{\s*([a-zA-Z]+=\s*[0-9]+;?)+\s*\}\s*$'; then # formatted data
            parse_status "$UNPARSED"
        else
            UNPARSED=""
        fi
    fi

    # try SSH
    if [ -z "$P_REMAINING" ] && [ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
        UNPARSED=$("${POMODORO_REMOTE_CMD[@]}" status -D 2>/dev/null)
    fi

    # try local
    if [ -z "$P_REMAINING" ] && [ -z "$UNPARSED" ]; then
        UNPARSED=$(cat $POMODORO_STATUS_FILE 2>/dev/null)
    fi

    if [ -z "$P_REMAINING" ] && [ ! -z "$UNPARSED" ]; then
        parse_status "$UNPARSED"
    fi


}


ARG=${NONOPT_ARGS[0]}
case "$ARG" in
    status)

        read_status

        if [ "$POMODORO_DATA_ONLY" -ne 0 ]; then
            echo "{count=${P_COUNT};start=${P_START};duration=${P_DURATION}}"
        elif [ ! -z "$P_REMAINING" ]; then
            if [ $P_REMAINING -gt 0 ]; then
                if [ "$POMODORO_GRAPHICAL" -ne 0 ]; then
                    number_as_blocks $P_REMAINING
                    echo " ${POMODORO_SYMBOL}"
                else
                    echo "${P_REMAINING} ${POMODORO_SYMBOL} "
                fi
            else
                echo "${POMODORO_BANG} ${POMODORO_NBSP} ${POMODORO_SYMBOL}"
            fi
        fi

        exit 0
        ;;

    start)
        if [ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
            "${POMODORO_REMOTE_CMD[@]}" start 2>&1 > /dev/null
        else
            echo "{count=0;start=$(date +%s);duration=${POMODORO_MINUTES}}" > $POMODORO_STATUS_FILE
        fi
        tmux refresh-client -S
        exit 0
        ;;

    clear|reset)
        if [ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
            "${POMODORO_REMOTE_CMD[@]}" clear 2>&1 > /dev/null
        fi
        rm -f $POMODORO_STATUS_FILE
        tmux refresh-client -S
        exit 0
        ;;

    *)
        echo "Command not recognized: $ARG"
        show_help
        exit 1
        ;;

esac
