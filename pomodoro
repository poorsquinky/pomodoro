#!/bin/bash

# pomodoro - Start and run a pomodoro timer for use in tmux status line and elsewhere

# Copyright (C) 2015 Erik Stambaugh

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program (see the file LICENSE); if not, see
# http://www.gnu.org/licenses/, or write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301  USA

# Set some defaults
POMODORO_STATUS_FILE=/tmp/pom_$USER
POMODORO_BANG="❗"
POMODORO_SYMBOL="🍅"
POMODORO_NBSP=" "
POMODORO_MINUTES=25

#POMODORO_GRAPH_BLOCKS=( ▏ ▎ ▍ ▌ ▋ ▊ ▉ )
POMODORO_GRAPH_BLOCKS=( ▁ ▂ ▃ ▄ ▅ ▆ ▇ )

POMODORO_GRAPHICAL=0

test -e "$HOME/.pomodororc" && . "$HOME/.pomodororc"

function show_help () {
echo "Usage: $0 [options] start|status|clear

Options:
    -h --help       Display this message
"
}

function number_as_blocks () {
    NUM=$1
    IDX=$(( $(( NUM * ${#POMODORO_GRAPH_BLOCKS[@]} )) / POMODORO_MINUTES ))
    if [ $IDX -lt 0 ]; then
        IDX=0
    elif [ $IDX -ge ${#POMODORO_GRAPH_BLOCKS[@]} ]; then
        IDX=$(( ${#POMODORO_GRAPH_BLOCKS[@]} - 1 ))
    fi

    echo -n ${POMODORO_GRAPH_BLOCKS[$IDX]}
}

NONOPT_ARGS=()
# I'm not in love with getopt or getopts right now, so we have this:
while [ $# -gt 0 ]; do
    ARG=$1
    shift
    case "$ARG" in
        -h|--help)
            show_help
            exit 0
        ;;
        *)
            NONOPT_ARGS+=("$ARG")
            ;;
    esac

done



ARG=${NONOPT_ARGS[0]}
case "$ARG" in
    "status")
        if [ -e $POMODORO_STATUS_FILE ] || ([ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]); then
            STATUS=$(cat $POMODORO_STATUS_FILE 2>/dev/null)

            if [ -z "$STATUS" ] && [ ! -z "$POMODORO_STATUS_URL" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
                STATUS=$(curl -s "$POMODORO_STATUS_URL" 2>/dev/null)
                if echo "$STATUS" | grep -q -E '[^0-9]'; then
                    STATUS=""
                fi
            fi

            if [ -z "$STATUS" ] && [ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
                ssh -q -o "ConnectTimeout 2" $POMODORO_SSH bin/pomodoro status 2>/dev/null
                exit 0
            elif [ -z "$STATUS" ]; then
                echo
            else
                DELTA=$(( $POMODORO_MINUTES - $(($(( $(date +%s) - $STATUS )) / 60 )) ))
                if [ $DELTA -gt 0 ]; then
                    if [ "$POMODORO_GRAPHICAL" -ne 0 ]; then
                        number_as_blocks $DELTA
                        echo " ${POMODORO_SYMBOL}"
                    else
                        echo "${DELTA} ${POMODORO_SYMBOL} "
                    fi
                else
                    echo "${POMODORO_BANG} ${POMODORO_NBSP} ${POMODORO_SYMBOL}"   # this line has a unicode nonbreaking space in it for format reasons
                fi
            fi
        else
            echo
        fi
        exit 0
        ;;

    "start")
        if [ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
            ssh -q -o "ConnectTimeout 2" $POMODORO_SSH bin/pomodoro start 2>&1 > /dev/null
        else
            date +%s > $POMODORO_STATUS_FILE
        fi
        tmux refresh-client -S
        exit 0
        ;;

    "clear")
        if [ ! -z "$POMODORO_SSH" ] && [ $(hostname) != "$POMODORO_NOSYNC_NAME" ]; then
            ssh -q -o "ConnectTimeout 2" $POMODORO_SSH bin/pomodoro clear 2>&1 > /dev/null
        fi
        rm -f $POMODORO_STATUS_FILE
        tmux refresh-client -S
        exit 0
        ;;

    *)
        echo "Command not recognized: $ARG"
        show_help
        exit 1
        ;;

esac
